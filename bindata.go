// Code generated by go-bindata.
// sources:
// assets/tiles.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTilesPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xbb\x02\x44\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x40\x00\x00\x00\x30\x08\x06\x00\x00\x00\xa1\x4b\x7c\x1f\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x12\x74\x00\x00\x12\x74\x01\xde\x66\x1f\x78\x00\x00\x02\x50\x49\x44\x41\x54\x68\x43\xed\x99\x89\x96\x83\x30\x08\x45\xeb\xfc\xb8\xed\x97\x3b\x79\x31\x9c\x92\x98\x85\x80\xad\xb1\x7a\x1d\xc6\x1c\x15\x84\x97\xc5\xda\x4e\xf3\x3c\x2f\x8f\x03\x79\x3e\x9f\xa1\x75\x0c\xbb\x08\xf0\x7a\xbd\x42\xab\x0f\x77\x6f\x2f\xc0\x34\x4d\xe1\x48\x1f\xcb\xb2\xa6\x6e\xf1\xff\x0b\xed\xcb\x72\x0b\x10\xf6\x97\x65\x1c\x01\x30\x9d\x53\xeb\x45\xe1\x33\x8e\x00\x58\xc7\x68\x2d\xe3\x6d\x06\x2d\x7a\x5a\x72\xfe\xa7\x98\x02\x48\x9c\x92\xe7\x6d\x29\x35\xff\x53\x08\x90\x3e\xe6\x7a\x1f\x7b\x35\xff\x53\x2d\x82\xda\xe7\x3d\x91\xf3\x3f\x8d\x00\x94\x7c\x53\x04\x8c\x6e\x32\x46\xc9\x7f\x3c\x01\x1a\xf5\x55\x81\x2f\x37\x01\xa7\x9a\x02\x9f\xe0\x16\x20\xec\x2f\xcb\xfd\x3a\x8c\x8f\x05\xa1\xad\xc4\xb2\x6a\xf9\x04\x6c\x18\x03\x78\x01\x26\x65\x11\xce\xd7\xfd\xd7\x7a\xaf\x4f\x2a\x9f\xff\x81\x01\xee\x45\x30\xec\x7f\x14\x8c\x8e\x3a\xbb\x0a\xd0\xba\x5d\x3b\x9d\x0a\x70\x36\x05\xc8\xd3\x14\x60\x9d\xe7\x32\x30\x13\x4b\x57\xe3\xb8\x76\xa6\xea\x9c\xc9\xa9\x9e\x7f\x53\x00\x2c\x71\x56\x11\x54\xf9\x13\xbc\x0e\x75\x90\x32\xa2\x29\x60\x11\xe1\x98\xe2\xb9\x03\xcf\x66\x4b\x24\x00\x8a\x2c\x6d\x74\x5e\x8a\x2a\x6f\x0e\x39\x77\x07\xc9\x39\x50\xa0\x2d\x91\x00\xe8\xe9\xd2\x46\xe7\xa5\xf0\xfc\xbb\x80\x03\x77\x96\xdf\x52\x85\x68\x0a\xa0\xe7\x35\xc5\x83\x6e\x11\xc8\xf1\x0b\xc5\x83\xa6\x00\x96\xe2\x89\x2e\x11\xcc\x85\xe7\xee\x56\x0e\xda\x14\xc0\x5a\x3c\x91\x4b\x6b\x03\x0f\x20\xbf\x6d\x06\xba\x1b\x59\x39\x98\x68\x0a\x48\x69\xe5\xdc\xac\xc9\x54\x74\x0a\x82\x91\x95\xd9\x55\x80\x33\xe2\xdf\x06\x43\x5b\x89\xad\xdb\x8c\x6f\xb3\xe6\x00\xc8\x7e\x13\x61\x0e\xfb\x14\xf9\x8f\xe0\xf6\x08\xdf\x22\x12\x80\xd2\x2e\xa5\xd9\x3a\xbf\x47\x84\x23\x80\x00\x8b\x4b\xcd\xef\x25\x96\xbf\xd6\x7f\xb5\x26\xb4\xed\xb5\x9c\xf4\x5c\x76\xcb\x5d\x93\x1e\x93\x59\x5f\xf1\x64\xb1\x4f\x4f\xf1\x64\xb1\x0f\x2f\x9c\xb7\x23\xab\x15\xa9\x14\x60\xa8\xa7\x00\xea\x86\x35\x7f\xfd\xd9\x13\x4d\xef\x93\xad\xbe\x9a\xde\x27\x7b\xfb\x16\x7b\x9d\xdb\xaf\x8f\x00\x33\xbc\x34\x21\xc3\x08\x20\x1a\xf6\xb5\x4b\x70\x8e\x9b\x90\xcb\x7f\x12\xbc\x05\x08\xfb\x01\x28\x4f\xe0\x75\x85\x8b\xb7\x94\xdc\x31\x29\x43\x7c\x0e\x70\x7f\x85\xf6\xdb\x5c\x91\xd9\xe3\xb0\xda\xb9\x9a\x0d\x36\x05\x28\xaf\x8e\x55\x6c\x07\xfc\x5d\x7b\x46\x41\xfe\xda\x9e\x51\x90\xbb\xb6\xdd\x83\x9f\x18\x01\x90\x1a\x0d\x8f\x2b\xcc\x73\xcc\xcb\x10\xd2\xa8\xf7\x3c\xe6\x79\xe9\x1b\x2a\x9c\xe3\x48\xbf\xc9\x8a\x04\x20\x28\xcd\x14\xf9\x3b\x9c\x3d\xc2\x77\x78\x3c\xfe\x01\x86\xaf\x34\xcc\xcb\x04\x1b\x1a\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xc1\xb5\xea\xe9\xbb\x02\x00\x00")

func assetsTilesPngBytes() ([]byte, error) {
	return bindataRead(
		_assetsTilesPng,
		"assets/tiles.png",
	)
}

func assetsTilesPng() (*asset, error) {
	bytes, err := assetsTilesPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tiles.png", size: 699, mode: os.FileMode(438), modTime: time.Unix(1539462647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tiles.png": assetsTilesPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tiles.png": &bintree{assetsTilesPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
